{"message":"cycle detected when processing `get_node_distance`","code":{"code":"E0391","explanation":"\nThis error indicates that some types or traits depend on each other\nand therefore cannot be constructed.\n\nThe following example contains a circular dependency between two traits:\n\n```compile_fail,E0391\ntrait FirstTrait : SecondTrait {\n\n}\n\ntrait SecondTrait : FirstTrait {\n\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":45,"byte_end":831,"line_start":4,"line_end":31,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn get_node_distance(","highlight_start":1,"highlight_end":22},{"text":"    curr_node: &str,","highlight_start":1,"highlight_end":21},{"text":"    target_node: &str,","highlight_start":1,"highlight_end":23},{"text":"    mut counter: usize,","highlight_start":1,"highlight_end":24},{"text":"    nodesmap: &mut HashMap<&str, Vec<&str>>,","highlight_start":1,"highlight_end":45},{"text":") -> _ {","highlight_start":1,"highlight_end":9},{"text":"    println!(\"{}\", curr_node);","highlight_start":1,"highlight_end":31},{"text":"    if curr_node == target_node {","highlight_start":1,"highlight_end":34},{"text":"        return counter;","highlight_start":1,"highlight_end":24},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        if let Some(nodesvec) = nodesmap.get_mut(curr_node) {","highlight_start":1,"highlight_end":62},{"text":"            counter += 1;","highlight_start":1,"highlight_end":26},{"text":"            println!(\"{:?}\", nodesvec);","highlight_start":1,"highlight_end":40},{"text":"            if nodesvec.contains(&target_node) {","highlight_start":1,"highlight_end":49},{"text":"                println!(\"found it\");","highlight_start":1,"highlight_end":38},{"text":"                return counter;","highlight_start":1,"highlight_end":32},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                for node in nodesvec {","highlight_start":1,"highlight_end":39},{"text":"                    return get_node_distance(node, target_node, counter, nodesmap);","highlight_start":1,"highlight_end":84},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                counter","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            println!(\"{}\", curr_node);","highlight_start":1,"highlight_end":39},{"text":"            counter","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"...which requires processing `get_node_distance`...","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":45,"byte_end":831,"line_start":4,"line_end":31,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn get_node_distance(","highlight_start":1,"highlight_end":22},{"text":"    curr_node: &str,","highlight_start":1,"highlight_end":21},{"text":"    target_node: &str,","highlight_start":1,"highlight_end":23},{"text":"    mut counter: usize,","highlight_start":1,"highlight_end":24},{"text":"    nodesmap: &mut HashMap<&str, Vec<&str>>,","highlight_start":1,"highlight_end":45},{"text":") -> _ {","highlight_start":1,"highlight_end":9},{"text":"    println!(\"{}\", curr_node);","highlight_start":1,"highlight_end":31},{"text":"    if curr_node == target_node {","highlight_start":1,"highlight_end":34},{"text":"        return counter;","highlight_start":1,"highlight_end":24},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        if let Some(nodesvec) = nodesmap.get_mut(curr_node) {","highlight_start":1,"highlight_end":62},{"text":"            counter += 1;","highlight_start":1,"highlight_end":26},{"text":"            println!(\"{:?}\", nodesvec);","highlight_start":1,"highlight_end":40},{"text":"            if nodesvec.contains(&target_node) {","highlight_start":1,"highlight_end":49},{"text":"                println!(\"found it\");","highlight_start":1,"highlight_end":38},{"text":"                return counter;","highlight_start":1,"highlight_end":32},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                for node in nodesvec {","highlight_start":1,"highlight_end":39},{"text":"                    return get_node_distance(node, target_node, counter, nodesmap);","highlight_start":1,"highlight_end":84},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                counter","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            println!(\"{}\", curr_node);","highlight_start":1,"highlight_end":39},{"text":"            counter","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...which again requires processing `get_node_distance`, completing the cycle","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"cycle used when collecting item types in top-level module","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":1473,"line_start":1,"line_end":49,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"use std::collections::HashMap;","highlight_start":1,"highlight_end":31},{"text":"use std::fs;","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"fn get_node_distance(","highlight_start":1,"highlight_end":22},{"text":"    curr_node: &str,","highlight_start":1,"highlight_end":21},{"text":"    target_node: &str,","highlight_start":1,"highlight_end":23},{"text":"    mut counter: usize,","highlight_start":1,"highlight_end":24},{"text":"    nodesmap: &mut HashMap<&str, Vec<&str>>,","highlight_start":1,"highlight_end":45},{"text":") -> _ {","highlight_start":1,"highlight_end":9},{"text":"    println!(\"{}\", curr_node);","highlight_start":1,"highlight_end":31},{"text":"    if curr_node == target_node {","highlight_start":1,"highlight_end":34},{"text":"        return counter;","highlight_start":1,"highlight_end":24},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        if let Some(nodesvec) = nodesmap.get_mut(curr_node) {","highlight_start":1,"highlight_end":62},{"text":"            counter += 1;","highlight_start":1,"highlight_end":26},{"text":"            println!(\"{:?}\", nodesvec);","highlight_start":1,"highlight_end":40},{"text":"            if nodesvec.contains(&target_node) {","highlight_start":1,"highlight_end":49},{"text":"                println!(\"found it\");","highlight_start":1,"highlight_end":38},{"text":"                return counter;","highlight_start":1,"highlight_end":32},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                for node in nodesvec {","highlight_start":1,"highlight_end":39},{"text":"                    return get_node_distance(node, target_node, counter, nodesmap);","highlight_start":1,"highlight_end":84},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                counter","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            println!(\"{}\", curr_node);","highlight_start":1,"highlight_end":39},{"text":"            counter","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"fn main() {","highlight_start":1,"highlight_end":12},{"text":"    let data = fs::read_to_string(\"input\").expect(\"Error\");","highlight_start":1,"highlight_end":60},{"text":"    let vec: Vec<&str> = data.split_whitespace().collect();","highlight_start":1,"highlight_end":60},{"text":"    let mut nodes: HashMap<&str, Vec<_>> = HashMap::new();","highlight_start":1,"highlight_end":59},{"text":"    for instruction in vec {","highlight_start":1,"highlight_end":29},{"text":"        let orbit: Vec<&str> = instruction.split(\")\").collect();","highlight_start":1,"highlight_end":65},{"text":"        if !nodes.contains_key(orbit[0]) {","highlight_start":1,"highlight_end":43},{"text":"            let neighbours = vec![orbit[1]];","highlight_start":1,"highlight_end":45},{"text":"            nodes.insert(orbit[0], neighbours);","highlight_start":1,"highlight_end":48},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            nodes.get_mut(orbit[0]).unwrap().push(orbit[1]);","highlight_start":1,"highlight_end":61},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    println!(\"{:?}\", nodes);","highlight_start":1,"highlight_end":29},{"text":"    let distance = get_node_distance(\"COM\", \"H\", 0, &mut nodes);","highlight_start":1,"highlight_end":65},{"text":"    println!(\"{}\", distance);","highlight_start":1,"highlight_end":30},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0391]\u001b[0m\u001b[0m\u001b[1m: cycle detected when processing `get_node_distance`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn get_node_distance(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    curr_node: &str,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    target_node: &str,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mut counter: usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...which requires processing `get_node_distance`...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn get_node_distance(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    curr_node: &str,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    target_node: &str,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mut counter: usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: ...which again requires processing `get_node_distance`, completing the cycle\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: cycle used when collecting item types in top-level module\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::collections::HashMap;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn get_node_distance(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println!(\"{}\", distance);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0391`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0391`.\u001b[0m\n"}
